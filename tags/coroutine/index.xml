<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>coroutine on すいはんぶろぐ.io</title>
    <link>https://suihan74.github.io/tags/coroutine/</link>
    <description>Recent content in coroutine on すいはんぶろぐ.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 09 Jan 2020 17:08:19 +0900</lastBuildDate>
    
	<atom:link href="https://suihan74.github.io/tags/coroutine/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>外部からprivateなsuspendメソッドを実行する方法</title>
      <link>https://suihan74.github.io/posts/2020/01_09_00_reflection_invoke_suspend/</link>
      <pubDate>Thu, 09 Jan 2020 17:08:19 +0900</pubDate>
      
      <guid>https://suihan74.github.io/posts/2020/01_09_00_reflection_invoke_suspend/</guid>
      <description>プライベートメソッドのテストを書きたいときなどの方法。
Class.getDeclaredMethod(...)を使ってプライベートメソッドを取得して実行する際に気を付けなければいけないことが通常のメソッドに比して少し増える。
実行したいメソッド たとえば以下のようなメソッドをリフレクションでぶっこ抜いてきて実行したいとする。
class Hoge { private suspend fun hoge(foo: Int, bar: String) = withContext(Dispachers.IO) { ... } } メソッドの取得方法 val hogeMethod = Hoge::class.java.getDeclaredMethod( &amp;#34;hoge&amp;#34;, Int::class.java, String::class.java, Continuation::class.java ).apply { isAccessible = true } 引数型の最後にContinuation::class.javaを記述する必要がある。
取得したメソッドの実行方法 次のような拡張メソッドを用意しておく（とまぁ便利）。
suspend fun Method.invokeSuspend(obj: Any, vararg args: Any?) : Any? = suspendCoroutineUninterceptedOrReturn { cont -&amp;gt; invoke(obj, *args, cont) } インスタンスと引数を渡して実行する。
hogeMethod.invokeSuspend(instance, 0, &amp;#34;hoge&amp;#34;) テストでこの処理結果を受けてassertEquals(...)とかしたい場合は、
runBlockingするなりして終了を待機しておけばいいんだろうか。
いい感じの方法が他にあれば知りたい。
 参考
java - How to run suspend method via reflection?</description>
    </item>
    
  </channel>
</rss>